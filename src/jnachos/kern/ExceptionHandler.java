/**
 * Copyright (c) 1992-1993 The Regents of the University of California.
 * All rights reserved.  See copyright.h for copyright notice and limitation 
 * of liability and disclaimer of warranty provisions.
 *
 *  Created by Patrick McSweeney on 12/13/08.
 *
 */
package jnachos.kern;

import java.util.ArrayList;

import jnachos.machine.*;

/**
 * The ExceptionHanlder class handles all exceptions raised by the simulated
 * machine. This class is abstract and should not be instantiated.
 */
public abstract class ExceptionHandler {

	public static final int SOURCEPOSITION = 0;
	
	/**
	 * This class does all of the work for handling exceptions raised by the
	 * simulated machine. This is the only funciton in this class.
	 *
	 * @param pException
	 *            The type of exception that was raised.
	 * @see ExceptionType.java
	 */
	public static void handleException(ExceptionType pException) {
		//System.out.println("Exception::"+pException);
		switch (pException) {
		// If this type was a system call
		
		case SyscallException:

			// Get what type of system call was made
			int type = Machine.readRegister(2);
			System.out.println("interrupt type" +type);

			// Invoke the System call handler
			SystemCallHandler.handleSystemCall(type);
			break;
		
		case PageFaultException:
			
			int virtualAddress = (int)Machine.readRegister(Machine.BadVAddrReg)/Machine.PageSize;
			//System.out.println("Currrnt process"+JNachos.getCurrentProcess().getmProcessId());
			
			assert ( virtualAddress > 0 && virtualAddress < JNachos.getCurrentProcess().getSpace().getmNumPages());
		

			int destFrameNumber = AddrSpace.mFreeMap.find();
			//System.out.println("In exception handler::"+ virtualAddress);
			int swapLoc = JNachos.getCurrentProcess().getSpace().getSwapPageNumFromVirtualAddress(virtualAddress);
			assert ( swapLoc > 0 && swapLoc < JNachos.getCurrentProcess().getSpace().getmNumPages());

			byte[] bytes = new byte[Machine.PageSize];
			
			JNachos.getmSwapFilePtr().readAt(bytes, Machine.PageSize, swapLoc * Machine.PageSize );
			
			if(destFrameNumber != -1) { // we have found a new free frame on the RAM
				//System.out.println("destFrame:: "+destFrameNumber);
				System.arraycopy(bytes, SOURCEPOSITION, Machine.mMainMemory, destFrameNumber * Machine.PageSize, Machine.PageSize);
				JNachos.fifoListList.add(destFrameNumber);
				JNachos.fifoListMap.put(destFrameNumber,JNachos.getCurrentProcess().getmProcessId());
				//JNachos.getCurrentProcess().getSpace().getVirtalpagelist().add(virtualAddress);
				//System.out.println("fifo::"+JNachos.fifoListList.toString());
				//System.out.println("virtual"+ JNachos.getCurrentProcess().getSpace().getVirtalpagelist().toString());

				JNachos.getCurrentProcess().getSpace().getTableEntry(virtualAddress).physicalPage = destFrameNumber;
				JNachos.getCurrentProcess().getSpace().getTableEntry(virtualAddress).valid = true;
				JNachos.getCurrentProcess().getSpace().getTableEntry(virtualAddress).use = true;

			}
			else { // free page frame not found, so evict a page from the RAM
				//destFrameNumber = (int) JNachos.fifoList.keySet().toArray()[0];
				destFrameNumber = JNachos.fifoListList.getFirst();
				JNachos.fifoListList.removeFirst();
				//JNachos.fifoList.remove(des);
				//JNachos.getCurrentProcess().getSpace().getVirtalpagelist().removeFirst();
				if(JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getTableEntry(JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getPageNumFromPageTable(destFrameNumber)).dirty==true)
				{
					JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getTableEntry(JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getPageNumFromPageTable(destFrameNumber)).dirty=false;
					byte[] swapOut = new byte[Machine.PageSize];
					System.arraycopy(Machine.mMainMemory, destFrameNumber * Machine.PageSize, swapOut, 0,Machine.PageSize);
					//System.out.println("Virtual address page::" + virtualAddress + "Generated by::"+JNachos.getCurrentProcess().getmProcessId());
					int evictPageAddress = JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getPageNumFromPageTable(destFrameNumber);//getCurrentProcess().getSpace().getPageNumFromPageTable(destFrameNumber);
					//System.out.println("V Page num frame of evict frame::" + evictPageAddress);
					//System.out.println("Frame to evict frame of evict frame::" + destFrameNumber);
	
					JNachos.getmSwapFilePtr().writeAt(swapOut, Machine.PageSize, JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getSwapPageNumFromVirtualAddress(evictPageAddress)*Machine.PageSize);
				}
				JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getTableEntry(JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getPageNumFromPageTable(destFrameNumber)).valid = false;
				JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getTableEntry(JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getPageNumFromPageTable(destFrameNumber)).use = false;
				JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getTableEntry(JNachos.objNachosProcess.get(JNachos.fifoListMap.get(destFrameNumber)).getSpace().getPageNumFromPageTable(destFrameNumber)).physicalPage = -1;
				


				System.arraycopy(bytes, 0, Machine.mMainMemory, destFrameNumber * Machine.PageSize,Machine.PageSize);
				JNachos.fifoListMap.remove(destFrameNumber);
				JNachos.fifoListList.add(destFrameNumber);
				JNachos.fifoListMap.put(destFrameNumber, JNachos.getCurrentProcess().getmProcessId());
				
				//JNachos.getCurrentProcess().getSpace().getVirtalpagelist().add(virtualAddress);
				//System.out.println("fifo::"+JNachos.fifoListMap.toString());
				//System.out.println("virtual::"+JNachos.getCurrentProcess().getSpace().getVirtalpagelist().toString());


				JNachos.getCurrentProcess().getSpace().getTableEntry(virtualAddress).physicalPage = destFrameNumber;			
				JNachos.getCurrentProcess().getSpace().getTableEntry(virtualAddress).valid = true;

				}
			break;
		// All other exceptions shut down for now
		default:
			System.out.println("In exit zero");
			System.exit(0);
		}
	}
}
